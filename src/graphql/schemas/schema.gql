# This is a generated file, don't edit

type CannotRegisterPetRejection implements Rejection {
  message: String!
}

type InternalErrorRejection implements Rejection {
  message: String!
}

type Mutation {
  registerPet(input: RegisterPetInput!): RegisterPetPayload!
}

type NotFoundRejection implements Rejection {
  message: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Pet {
  id: ID!
  ownerId: ID!
  type: PetType!
}

type PetConnection {
  edges: [PetEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PetEdge {
  cursor: String!
  node: Pet!
}

enum PetType {
  Cat
  Dog
  Giraffe
}

type Query {
  pet(id: ID!): Pet
  pets(
    after: String
    before: String
    first: Int
    last: Int
    types: [PetType!]
  ): PetConnection
  user(id: ID!): User
  viewer: User
}

input RegisterPetInput {
  type: PetType!
}

union RegisterPetPayload =
  | CannotRegisterPetRejection
  | InternalErrorRejection
  | RegisterPetSuccessPayload
  | UnauthorizedRejection
  | ValidationRejection

type RegisterPetSuccessPayload {
  pet: Pet!
}

interface Rejection {
  message: String!
}

type UnauthorizedRejection implements Rejection {
  message: String!
}

type User {
  id: ID!
  pets(
    after: String
    before: String
    first: Int
    last: Int
    types: [PetType!]
  ): PetConnection!
}

type ValidationFieldError {
  message: String
  path: [String!]
}

type ValidationRejection implements Rejection {
  fields: [ValidationFieldError!]
  message: String!
}
