# This is a generated file, don't edit

type CannotRegisterPetRejection implements Rejection {
  message: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type InternalErrorRejection implements Rejection {
  message: String!
}

type Mutation {
  registerPet(input: RegisterPetInput!): RegisterPetPayload!
  suspendPet(input: SuspendPetInput!): SuspendPetPayload!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Pet {
  description: String
  id: ID!
  owner: User!
  ownerId: ID!
  statusInfo: PetStatusInfo!
  type: PetType!
}

type PetActiveStatusInfo implements PetStatusInfo {
  status: PetStatus!
}

type PetConnection {
  edges: [PetEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PetEdge {
  cursor: String!
  node: Pet!
}

enum PetStatus {
  Active
  Suspended
}

interface PetStatusInfo {
  status: PetStatus!
}

type PetSuspendInvalidStatusRejection implements Rejection {
  message: String!
}

type PetSuspendedStatusInfo implements PetStatusInfo {
  status: PetStatus!
  suspensionReasion: String
}

enum PetType {
  Cat
  Dog
  Giraffe
}

type Query {
  pet(id: ID!): Pet
  pets(
    after: String
    before: String
    first: Int
    last: Int
    types: [PetType!]
  ): PetConnection
  user(id: ID!): User
  viewer: User
}

input RegisterPetInput {
  description: String
  type: PetType!
}

union RegisterPetPayload =
  | CannotRegisterPetRejection
  | InternalErrorRejection
  | RegisterPetSuccessPayload
  | UnauthorizedRejection
  | ValidationRejection

type RegisterPetSuccessPayload {
  pet: Pet!
}

interface Rejection {
  message: String!
}

input SuspendPetInput {
  id: ID!
  suspensionReason: String
}

union SuspendPetPayload =
  | InternalErrorRejection
  | PetSuspendInvalidStatusRejection
  | SuspendPetSuccessPayload
  | UnauthorizedRejection
  | ValidationRejection

type SuspendPetSuccessPayload {
  pet: Pet!
}

type UnauthorizedRejection implements Rejection {
  message: String!
}

type User {
  id: ID!
  pets(
    after: String
    before: String
    first: Int
    last: Int
    types: [PetType!]
  ): PetConnection!
}

type ValidationFieldError {
  message: String
  path: [String!]
}

type ValidationRejection implements Rejection {
  fields: [ValidationFieldError!]
  message: String!
}
